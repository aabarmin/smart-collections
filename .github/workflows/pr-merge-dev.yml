name: On PR merge to DEV

on:
  workflow_dispatch:
    inputs:
      branch:
        type: string
        required: true
        default: "dev"
        description: "Branch for debugging purproses"
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  release_create:
    name: Create a new release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3

      - name: Perform a release
        run: |
          COMMIT_MSG="Test commit (#2)"
          PR_ID=$(echo "${COMMIT_MSG}" | grep -Eo '#\d+' | grep -Eo '\d+')
        
          if [ -z "$PR_ID" ]
          then
            echo "PR ID is not included into the latest commit subject"
            exit 1
          fi
        
          echo "Latest PR is $PR_ID"
        
          LATEST_TAG=$(git tag | grep v | tail -n 1 | grep -Eo '\d+.\d+.\d+')
          if [ -z "$LATEST_TAG" ]
          then
            LATEST_TAG="0.0.0"
          fi
        
          echo "Latest version is $LATEST_TAG"
          
          LABELS=$(gh pr view $PR_ID --json labels -q '.labels[].name')
          IS_PATCH=$(echo $LABELS | grep patch)
          IS_MINOR=$(echo $LABELS | grep minor)
          IS_MAJOR=$(echo $LABELS | grep major)
          
          if [ -z "$IS_PATCH" ] && [ -z "$IS_MINOR" ] && [ -z "$IS_MAJOR" ]
          then
            echo "PR $PR_ID does not have patch/minor/major labels"
            exit 1
          fi
          
          IFS='.' read -r -a PARTS <<< "$LATEST_TAG"
          
          if [ ! -z "$IS_MAJOR" ]
          then
            PARTS[0]=$((${PARTS[0]}+1))
            PARTS[1]=0
            PARTS[2]=0
          fi
          
          if [ ! -z "$IS_MINOR" ]
          then
            PARTS[1]=$((${PARTS[1]}+1))
            PARTS[2]=0
          fi
          
          if [ ! -z "$IS_PATCH" ]
          then
            PARTS[2]=$((${PARTS[2]}+1))
          fi
          
          NEXT_VERSION="v${PARTS[0]}.${PARTS[1]}.${PARTS[2]}"
          NEXT_RELEASE="release-$NEXT_VERSION"
          echo "Next version is $NEXT_VERSION"
          
          gh release create $NEXT_VERSION --generate-notes --latest --target $BRANCH --title $NEXT_RELEASE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: ${{ inputs.branch }}